import 'dotenv/config';
import { MigrationInterface, QueryRunner } from 'typeorm';

export class Init1749072458488 implements MigrationInterface {
  private readonly SCHEMA: string;

  constructor() {
    this.SCHEMA = process.env.DATABASE_SCHEMA as string;
  }

  public async up(runner: QueryRunner): Promise<void> {
    runner.query(sql`
      SET SEARCH_PATH TO ${this.SCHEMA};

      CREATE TABLE client (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR NOT NULL,
        nickname VARCHAR NOT NULL,
        blurb TEXT,
        api_key VARCHAR NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT client_pk PRIMARY KEY (id),
        CONSTRAINT client_uq_nickname UNIQUE (nickname, deleted_at)
      );

      CREATE TABLE person (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        name VARCHAR NOT NULL,
        email VARCHAR NOT NULL,
        phone VARCHAR,
        document VARCHAR,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT person_pk PRIMARY KEY (id),
        CONSTRAINT person_uq_email UNIQUE (email, deleted_at),
        CONSTRAINT person_uq_phone UNIQUE (phone, deleted_at),
        CONSTRAINT person_uq_document UNIQUE (document, deleted_at)
      );

      CREATE TABLE credential (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        person_id BIGINT NOT NULL,
        password VARCHAR NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT credential_pk PRIMARY KEY (id),
        CONSTRAINT credential_uq_person UNIQUE (person_id, deleted_at),
        CONSTRAINT fk_person FOREIGN KEY (person_id) REFERENCES person (id)
      );

      CREATE TABLE account (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        person_id BIGINT NOT NULL,
        client_id BIGINT NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT account_pk PRIMARY KEY (id),
        CONSTRAINT account_uq_person_client UNIQUE (person_id, client_id, deleted_at),
        CONSTRAINT fk_person FOREIGN KEY (person_id) REFERENCES person (id),
        CONSTRAINT fk_client FOREIGN KEY (client_id) REFERENCES client (id)
      );

      CREATE TABLE session (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        account_id BIGINT NOT NULL,
        access_token VARCHAR NOT NULL,
        refresh_token VARCHAR,
        refresh_expires_at TIMESTAMPTZ,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT session_pk PRIMARY KEY (id),
        CONSTRAINT session_ck_refresh CHECK ((refresh_token IS NULL) = (refresh_expires_at IS NULL)),
        CONSTRAINT fk_account FOREIGN KEY (account_id) REFERENCES account (id)
      );

      CREATE TABLE permission (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        client_id BIGINT NOT NULL,
        name VARCHAR NOT NULL,
        blurb TEXT,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMPTZ,
        deleted_at TIMESTAMPTZ,
        CONSTRAINT permission_pk PRIMARY KEY (id),
        CONSTRAINT permission_uq_client UNIQUE (name, client_id, deleted_at),
        CONSTRAINT fk_client FOREIGN KEY (client_id) REFERENCES client (id)
      );

      CREATE TABLE authority (
        id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        account_id BIGINT NOT NULL,
        permission_id BIGINT NOT NULL,
        created_by BIGINT NOT NULL,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        deleted_at TIMESTAMPTZ,
        CONSTRAINT authority_pk PRIMARY KEY (id),
        CONSTRAINT authority_uq_account_permission UNIQUE (account_id, permission_id, deleted_at),
        CONSTRAINT fk_account FOREIGN KEY (account_id) REFERENCES account (id),
        CONSTRAINT fk_permission FOREIGN KEY (permission_id) REFERENCES permission (id),
        CONSTRAINT fk_creator FOREIGN KEY (created_by) REFERENCES account (id)
      );
    `);
  }

  public async down(runner: QueryRunner): Promise<void> {}
}
